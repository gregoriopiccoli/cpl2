-- espressioni
10
a+b+c
10+c
"alfa"+"beta"
alfa(1,2,3)
[1,2,a+10]
a[1]
a[1][2]
|1,2,"alfa"|
a.b.c[1].z
a or b and c
(a or b) and c
{"alfa":100,"beta":|1,2,3|}

-- assegnazioni
a:="alfa"+"beta"+f(1,2,3)
a.b.c:=100
a[10].z:=32

-- dichiarazione di variabili
var int i
var int i,j,k
var int i:=100,j:=200
var int|str i
var (int:) f
var (int:int,str,bool) f
var (int:int a, str b, bool c) f
var () p
var int i:=100

is(1,int)
is("alfa",str)

func int doppio(int x)
  result:=x+x
end

proc p(int x)
  if x>0
    x:=1
  else
    x:=2
  end
end

class test
  var int i,j,k
  var str s1,s2:="alfa"
  func int f(int x)
    result:=x+x
  end
end

-- classe con ereditarietà multipla
class t(t1,t2)
end

-- classe con generici
class [T] ttt
  var T i,j,k
  func T f(T x)
    result:=x
  end  
end
      
enum stato occupato,libero,errore

type array[int|str] ttt
  
? 1,2,3
? "alfa ",[1,2,3],' ',|1,2,3|

if true
  100
end

if false
  100
else
  200
end

if 1=0
  100
elseif 1=1
  200
end

if 1=0
  100
elseif 1=1
  200
else
  300  
end

while i<10
  100
end
  
proc p(int i ...) abstract
proc p(int d*) abstract
          

  /*
  int r=1;
  prg.labelPos.resize(10);
  prg.code(new pcodeIntType());     // 0: INT_TYPE
  prg.code(new pcodeVar(0));        // 1: VAR i
  prg.code(new pcodePop());         // 2: POP
  prg.code(new pcodeIntConst(0));   // 3: INT_CONST 0
  prg.code(new pcodeStore(0));      // 4: STORE i
  prg.code(new pcodePop());         // 5: POP 
  prg.code(new pcodeLabel(3));      // 6: LABEL 3
  prg.code(new pcodeLoad(0));       // 7: LOAD i
  prg.code(new pcodeIntConst(1000000)); // 8: INT_CONST 1000000
  prg.code(new pcodeLt());          // 9: LT 
  prg.code(new pcodeIfFalse(4));    //10: IF_FALSE 4
  prg.code(new pcodeLoad(0));       //11: LOAD i
  prg.code(new pcodeIntConst(1));   //12: INT_CONST 1
  prg.code(new pcodePlus());        //13: PLUS 
  prg.code(new pcodeStore(0));      //14: STORE i
  prg.code(new pcodePop());         //15: POP 
  prg.code(new pcodeGoto(3));       //16: GOTO 3
  prg.code(new pcodeLabel(4));      //17: LABEL 4
  prg.code(new pcodePCodeEnd(9));
  */

/*
  //
  int x=theStringIntern.add("x");
  int y=theStringIntern.add("y");
  // --- oggetti di base
  shared_ptr<obj> n(new intObj(100));
  shared_ptr<obj> s(new strObj("pippo"));
  cout << n->print() << " " << s->print() << endl;
  // --- contenitore
  shared_ptr<containerObj> cc(new containerObj());
  cc->add(x,theNil);
  cc->add(y,theNil);
  cc->store(x,n);
  cc->store(y,s);
  cout << cc->load(y)->print() << " " << cc->load(x)->print() << endl;
  // --- array
  shared_ptr<arrayObj> aa(new arrayObj());
  aa->append(n);
  aa->append(s);
  aa->append(theTrue);
  aa->append(theFalse);
  cout << aa->sliceidx(0)->print() << " " << aa->sliceidx(1)->print() << " len:" << aa->len() << endl;
  aa->storesliceidx(0,s);
  cout << 1 << endl;
  shared_ptr<obj> ff(new floatObj(12.34));
  aa->insert(0,ff);
  aa->remove(1);
  cout << aa->sliceidx(0)->print() << " " << aa->sliceidx(1)->print() << " len:" << aa->len() << endl;
  // --- dizionari
  shared_ptr<dictObj> dd(new dictObj());
  dd->storekey("n",n);
  dd->storekey(n->print(),s);
  dd->storekey("xxx",n);
  dd->storekey("aa",aa);
  cout << "dd['n']=" << dd->loadkey("n")->print() << " dd['"<< n->print() <<"']=" << dd->loadkey(n->print())->print() << " dd['xxx']=" << dd->loadkey("xxx")->print() << endl;
  // --- stampa di array
  cout << aa->print() << endl;
  // --- stampa del dizionario
  cout << dd->print() << endl;
  // --- prova di cast ...
  //obj* ir=n;
  intObj* ii=dynamic_cast<intObj*>(n.get());
  if (ii!=0) printf("riuscito come dovrebbe essere!\n");
  shared_ptr<strObj> iii(dynamic_cast<strObj*>(n.get()));
  if (iii.get()==0) printf("non riuscito come dovrebbe essere!\n");
  u8string utf8=u8"Hello € world! ↗";
  printf("%s\n",(char*)utf8.c_str());
  */
