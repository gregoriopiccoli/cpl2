import alfa.beta
from gamma import a,b,c

func int doppio(int i)
  result:=i+i
end

proc p()
end

if 1<2
  ? 'ok'
end

var int i:=1
while i<10
  i:=i+1
end

repeat
  i:=i-1
until i<0       

switch xx
  case 1,2,3
    100
  case 'a','b'
    200
  else
    300
end

class ccc
  var int i,j,k
  func int f(int i) abstract
  proc p() abstract
end  

class c2(ccc)
  func int f(int i)
    result:=100
  end
  proc p()
  end
end

enum stati aperto,chiuso,occupato

type int|array[tuple[int,int]] i_or_a

func float distance(point x, point y) abstract
func float euclidean(point x, point y) <distance> ; end

class ccc <intf>
  var int i,j,k
  proc p(int i)
    pre i>=0
    post i>=old.i
  end
  invariant i<j and k<j
end

var int i:=0
pre i=0
i:=i+1
post i>old.i
