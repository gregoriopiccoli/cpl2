/*

DA FARE:
pcode per le funzioni, ora parte dopo il tipo ... PREAMBLE? forse non serve perché il preambolo viene usato solo durante la creazione della funzione

FATTO:
2025/01/18: parametri con valori di default, non deve essere calcolato se viene passato ...
2025/01/17: short-cut evaluation su OR

*/

%token_type {char*}
%token_prefix TOK_

%type par_list {int}
%type array_list {int}
%type dict_list {int}
%type tuple_list {int}
%type type_list {int}
%type print_list {int}
%type or_type {int}
%type iif_test {int}
%type iif_then {int}

%extra_argument {parserState *sState}
%syntax_error {printf("syntax error at line %d!\n",sState->lineNo);sState->errors++;}

start ::= cmd_list.                               {int errs=sState->errors; emit_i(P_PCODEEND,errs);}

// --- comandi --- livello esterno che permette import, class, func, proc, ... enum, type 

cmd_list ::= cmd_list cmd.
cmd_list ::= .

cmd ::= import EOL.
cmd ::= funcdecl EOL.
cmd ::= procdecl EOL.
cmd ::= classdecl EOL.
cmd ::= enum EOL.
cmd ::= typedecl EOL.
cmd ::= stm.

// --- import ---

import ::= IMPORT importid_list(N).               {emit_i(P_IMPORT,N);}
import ::= FROM importid IMPORT importid_list(N). {emit_i(P_FROM,N);}

%type importid_list {int}
importid_list(N) ::= importid_list(P) COMMA importid. {N = P+1;}
importid_list(N) ::= importid.                    {N = 1;}

importid ::= ID(value).                           {emit_s(P_IMPORTID,value);dispose(&value);}
importid ::= importid DOT ID(value).              {emit_s(P_IMPORTIDX,value);dispose(&value);}

%type dottedid_list {int}
dottedid_list(N) ::= dottedid_list(P) COMMA dottedid.   {N = P+1;}
dottedid_list(N) ::= dottedid.                    {N = 1;}

// --- funzioni, procedure ed eventi ---

funcdecl ::= funcname procparlist impl local observer EOL stm_list END. {emit(P_ENDFUNC);}
funcdecl ::= funcname procparlist impl local ABSTRACT.                  {emit(P_ABSTRACT);}

procdecl ::= procname procparlist impl local observer EOL stm_list END. {emit(P_ENDPROC);}
procdecl ::= procname procparlist impl local ABSTRACT.                  {emit(P_ABSTRACT);}
procdecl ::= eventname procparlist.                                     {emit(P_EMITEVENT);}

funcname ::= FUNC generic type ID(value).         {emit_s(P_FUNC,value);dispose(&value);}
procname ::= PROC generic ID(value).              {emit_s(P_PROC,value);dispose(&value);}
eventname ::= EVENT ID(value).                    {emit_s(P_EVENT,value);dispose(&value);} // possono esserci evento con genericità?

procparlist ::= LPAR pardecl_list RPAR.           {emit(P_ENDPARM);}
             
local ::=.
local ::= LOCAL.                                  {emit(P_LOCAL);}

observer ::=.
observer ::= OBSERVER.
             
const ::= .
const ::= CONST.                                  {emit(P_CONST);}
             
pardecl_list ::= .
pardecl_list ::= pardecl.
pardecl_list ::= pardecl_list COMMA pardecl.
             
pardecl ::= type ID(value).                       {emit_s(P_PARM,value);dispose(&value);}     
pardecl ::= type AT ID(value).                    {emit_s(P_PARM_REF,value);dispose(&value);}
pardecl ::= pardecla ASSIGN expr.                 {emit(P_ENDPARM_DEFAULT);}     
pardecla ::= type ID(value).                      {emit_s(P_PARM_DEFAULT,value);dispose(&value);}
//pardecl ::= type AT ID(value) ASSIGN expr.        {dispose(&value);} // si puo' fare un parametro per referenza inizializzato?
pardecl ::= type ID(value) DOT DOT DOT.           {emit_s(P_PARM_VA,value);dispose(&value);}
pardecl ::= type ID(value) MULT.                  {emit_s(P_PARM_VD,value);dispose(&value);}

impl ::= .
impl ::= LT dottedid_list(N) GT.                  {emit_i(P_IMPLEMENTS,N);}

// --- classi ---

classdecl ::= classname classinherit impl EOL classcmd_list END. {emit(P_ENDCLASS);}

classname ::= CLASS generic ID(value).            {emit_s(P_CLASS,value);dispose(&value);}

classinherit ::= .                                {emit_i(P_INHERIT,0);}
classinherit ::= LPAR dottedid_list(N) RPAR.      {emit_i(P_INHERIT,N);}

classcmd_list ::=.
classcmd_list ::= classcmd_list classcmd.

classcmd ::= funcdecl EOL.
classcmd ::= procdecl EOL.
classcmd ::= vardecl EOL.
classcmd ::= enum EOL.
classcmd ::= invariant_stm EOL.

generic ::=.
generic ::= LSQ generic_list RSQ.                 {emit_s(P_COMMENT,"da fare generics ...");}
             
generic_list ::= ID(value).                       {dispose(&value);}
generic_list ::= generic_list COMMA ID(value).    {dispose(&value);}

// --- enum ---

enum ::= ENUM ID(value) enum_list.                {emit_s(P_COMMENT,"da fare enum ...");dispose(&value);}

enum_list ::= ID(value).                          {dispose(&value);}
enum_list ::= enum_list COMMA ID(value).          {dispose(&value);}

// --- type ---

typedecl ::= TYPE type ID(value).                 {emit_s(P_COMMENT,"da fare user type ...");dispose(&value);}

// --- statements --- 

stm_list ::= stm_list stm.
stm_list ::= .
 
stm ::= expr EOL.                                 {emit(P_POP);}
stm ::= vardecl EOL.                              {emit(P_POP);}
stm ::= if_stm EOL.
stm ::= switch_stm EOL.
stm ::= for_stm EOL.
stm ::= foreach_stm EOL.
stm ::= while_stm EOL.
stm ::= repeat_stm EOL.
stm ::= try_catch_stm EOL.
stm ::= raise_stm EOL.
stm ::= print_stm EOL.
stm ::= pre_stm EOL.
stm ::= post_stm EOL.
stm ::= assert_stm EOL.
stm ::= EOL.

// --- dichiarazione di variabili ---

vardecl ::= VAR type var_list const local.        

var_list ::= ID(value).                           {emit_s(P_VAR,value);dispose(&value);}
var_list ::= ID(value) ASSIGN lexpr.              {emit_s(P_VAR_STORE,value);dispose(&value);}
var_list ::= var_list COMMA ID(value).            {emit_s(P_VAR,value);dispose(&value);}
var_list ::= var_list COMMA ID(value) ASSIGN lexpr. {emit_s(P_VAR_STORE,value);dispose(&value);}

// --- dichiarazione di tipo ---

type ::= btype.
type ::= or_type(N).                              {emit_i(P_OR_TYPE,N);}

or_type(N) ::= btype VBAR btype.                  {N = 2;}
or_type(N) ::= or_type(P) VBAR btype.             {N = P+1;}
 
btype ::= INT.                                    {emit(P_INT_TYPE);}
btype ::= STR.                                    {emit(P_STR_TYPE);}
btype ::= BOOL.                                   {emit(P_BOOL_TYPE);}
btype ::= FLOAT.                                  {emit(P_FLOAT_TYPE);}
btype ::= DATE.                                   {emit(P_DATE_TYPE);}
btype ::= TIME.                                   {emit(P_TIME_TYPE);}
btype ::= DATETIME.                               {emit(P_DATETIME_TYPE);}
btype ::= ANY.                                    {emit(P_ANY_TYPE);}
btype ::= QUESTIONMARK.                           {emit(P_ANY_TYPE);}    

btype ::= dottedid.                               // {emit_s(P_COMMENT,"da fare user type");} non occorre fare niente, però qui c'è un nome utente che diventa tipo ...

dottedid ::= ID(value).                           {emit_s(P_LOAD,value);dispose(&value);}         
dottedid ::= dottedid DOT ID(value).              {emit_s(P_LOADX,value);dispose(&value);}

btype ::= ARRAY LSQ type RSQ.                     {emit(P_ARRAY_TYPE);}
btype ::= DICT LSQ type RSQ.                      {emit(P_DICT_TYPE);}
btype ::= TUPLE LSQ type_list(N) RSQ.             {emit_i(P_TUPLE_TYPE,N);}
btype ::= LPAR type COLON type_list(N) RPAR.      {emit_i(P_FUNC_TYPE,N);}
btype ::= LPAR type COLON RPAR.                   {emit_i(P_FUNC_TYPE,0);}
btype ::= LPAR type_list(N) RPAR.                 {emit_i(P_PROC_TYPE,N);}
btype ::= LPAR RPAR.                              {emit_i(P_PROC_TYPE,0);}

type_list(N) ::= type.                            {N = 1;} 
type_list(N) ::= type ID(value).                  {N = 1;emit_s(P_PARMNAME,value);dispose(&value);} 
type_list(N) ::= type_list(P) COMMA type.         {N = P+1;}
type_list(N) ::= type_list(P) COMMA type ID(value). {N = P+1;emit_s(P_PARMNAME,value);dispose(&value);}

// --- if statement ---

%type ifelseif_list {ifelseif}
%type if_else       {ifelseif}
%type if_elseif     {ifelseif}
%type if_expr       {int}

if_stm ::= ifelseif_list(N) END.                  {emit_i(P_LABEL,N.start);if(N.start!=N.last) emit_i(P_LABEL,N.last);}
if_stm ::= if_else(N) stm_list END.               {emit_i(P_LABEL,N.start);}

if_else(N) ::= ifelseif_list(N) ELSE EOL.         {if(N.start==N.last) N.start=sState->labelCnt++;emit_i(P_GOTO,N.start);emit_i(P_LABEL,N.last);}
if_elseif(N) ::= ifelseif_list(N) ELSEIF.         {if(N.start==N.last) N.start=sState->labelCnt++;emit_i(P_GOTO,N.start);emit_i(P_LABEL,N.last);}

ifelseif_list(N) ::= if_elseif(NN) if_expr(P) stm_list. {N.start=NN.start;N.last=P;}
ifelseif_list(N) ::= IF if_expr(P) stm_list.      {N.start=P;N.last=P;} 
 
if_expr(N) ::= expr EOL.                          {N=sState->labelCnt++;emit_i(P_IF_FALSE,N);}

// --- for statement ---

for_stm ::= FOR ID(value) ASSIGN expr TO expr EOL stm_list END.                  {emit_s(P_COMMENT,"da fare for ...");dispose(&value);}
for_stm ::= FOR ID(value) ASSIGN expr TO expr STEP expr EOL stm_list END.        {emit_s(P_COMMENT,"da fare for ...");dispose(&value);}
for_stm ::= FOR ID(value) ASSIGN expr DOWNTO expr EOL stm_list END.              {emit_s(P_COMMENT,"da fare for ...");dispose(&value);}
for_stm ::= FOR ID(value) ASSIGN expr DOWNTO expr STEP expr EOL stm_list END.    {emit_s(P_COMMENT,"da fare for ...");dispose(&value);}

// --- switch statement ---

switch_stm ::= SWITCH expr EOL case_list case_else END.                          {emit_s(P_COMMENT,"da fare switch ...");}

case_list ::= .
case_list ::= case_list case_case.
case_else ::=.
case_else ::= ELSE EOL stm_list.

case_case ::= CASE case_const_list EOL stm_list.

case_const_list ::= case_const.
case_const_list ::= case_const_list COMMA case_const.

case_const ::= INT_CONST.
case_const ::= STR_CONST.
case_const ::= TRUE.
case_const ::= FALSE.

// --- for each statement ---

foreach_stm ::= FOR EACH ID(value) IN expr EOL stm_list END.                     {emit_s(P_COMMENT,"da fare for-each");dispose(&value);}
foreach_stm ::= FOR EACH ID(value) COMMA ID(key) IN expr EOL stm_list END.       {emit_s(P_COMMENT,"da fare for-each");dispose(&value);dispose(&key);}
foreach_stm ::= FOR EACH ID(value) IN expr WITH expr EOL stm_list END.           {emit_s(P_COMMENT,"da fare for-each-with");dispose(&value);}
foreach_stm ::= FOR EACH ID(value) COMMA ID(key) IN expr WITH expr EOL stm_list END. {emit_s(P_COMMENT,"da fare for-each-with");dispose(&value);dispose(&key);}

// --- while statement ---

%type while_expr {ifelseif}
%type while_tok {int}

while_stm ::= while_expr(N) stm_list END.         {emit_i(P_GOTO,N.start); emit_i(P_LABEL,N.last);} 
while_expr(N) ::= while_tok(P) expr EOL.          {N.start=P;N.last=sState->labelCnt++;emit_i(P_IF_FALSE,N.last);}
while_tok(N) ::= WHILE.                           {N=sState->labelCnt++;emit_i(P_LABEL,N);}

// --- repeat statement ---

%type repeat_tok {int}

repeat_stm ::= repeat_tok(N) stm_list UNTIL expr. {emit_i(P_IF_FALSE,N);}              
repeat_tok(N) ::= REPEAT.                         {N=sState->labelCnt++;emit_i(P_LABEL,N);}

// --- try/catch statement ---

try_catch_stm ::=  trystart stm_list catch_list END.
trystart ::= TRY EOL.                             {emit(P_TRY);}
catch_list ::= catch_catch.
catch_list ::= catch_list catch_catch.
catch_catch ::= CATCH LPAR type ID(value) RPAR EOL stm_list. {emit_s(P_COMMENT,"da fare catch ...");dispose(&value);}

raise_stm ::= RAISE.                              {emit_i(P_RAISE,0);}
raise_stm ::= RAISE LPAR expr RPAR.               {emit_i(P_RAISE,1);}
raise_stm ::= RAISE LPAR expr COMMA RPAR.         {emit_i(P_RAISE,2);}

// --- print statement ---

print_stm ::= QUESTIONMARK print_list(N).         {emit_i(P_PRINT,N);}

print_list(N) ::= expr.                           {N = 1;}
print_list(N) ::= print_list(P) COMMA expr.       {N = P+1;}

// --- gli statement di controllo/test

pre_stm ::= PRE expr.                            {emit_i(P_PRE,1);} 
pre_stm ::= PRE expr COLON expr.                 {emit_i(P_PRE,2);} 
post_stm ::= POST expr.                          {emit_i(P_POST,1);}
post_stm ::= POST expr COLON expr.               {emit_i(P_POST,2);}
assert_stm ::= ASSERT expr.                      {emit_i(P_ASSERT,1);}
assert_stm ::= ASSERT expr COLON expr.           {emit_i(P_ASSERT,2);}
invariant_stm ::= INVARIANT expr.                {emit_s(P_COMMENT,"da fare invariant ...");}

// --- espressioni con assegnazione ---

expr ::= lexpr.                            
expr ::= ID(value) ASSIGN expr.                   {emit_s(P_STORE,value);dispose(&value);}
expr ::= RESULT ASSIGN expr.                      {emit(P_STORE_RESULT);}
expr ::= ref DOT ID(value) ASSIGN expr.           {emit_s(P_STOREX,value);dispose(&value);}
expr ::= ref LSQ expr RSQ ASSIGN expr.            {emit(P_STORESLICE);}

// --- espressioni logiche ---
lexpr ::= lexpra.
lexpr ::= or_short(P).                            {emit_i(P_LABEL,P);}
lexpra ::= rexpr.
lexpra ::= and_short(P).                          {emit_i(P_LABEL,P);}
// --- lexpr ::= lexpr OR lexpra.                        {emit(P_OR);} // sostituito da shortcut

%type or_short {int}
%type and_short {int}
%type or_short_or1 {int}
%type and_short_and1 {int}
%type or_short_or2 {int}
%type and_short_and2 {int}

or_short(N) ::= or_short_or1(P) lexpra.           {N=P;}
or_short_or1(N) ::= lexpra OR.                    {N = sState->labelCnt++;emit_i(P_IF_OR,N);}
or_short(N) ::= or_short_or2(P) lexpra.           {N=P;}
or_short_or2(N) ::=or_short(P) OR.                {N = P;emit_i(P_IF_OR,N);} 

and_short(N) ::= and_short_and1(P) rexpr.         {N = P;}
and_short_and1(N) ::= rexpr AND.                  {N = sState->labelCnt++;emit_i(P_IF_AND,N);} // riserva la label che verrà messa alla fine
and_short(N) ::= and_short_and2(P) rexpr.         {N = P;}
and_short_and2(N) ::=and_short(P) AND.            {N = P;emit_i(P_IF_AND,N);} 
// --- lexpra ::= lexpra AND rexpr.                      {printf("AND\n");} // sostituito da shortcut

// --- espressioni relazionali
rexpr ::= term.
rexpr ::= term LT term.                           {emit(P_LT);}
rexpr ::= term LE term.                           {emit(P_LE);}
rexpr ::= term EQ term.                           {emit(P_EQ);}
rexpr ::= term GE term.                           {emit(P_GE);}
rexpr ::= term GT term.                           {emit(P_GT);}
rexpr ::= term NE term.                           {emit(P_NE);}
rexpr ::= term LT term LT term.                   {emit(P_LT_LT);}
rexpr ::= term LE term LE term.                   {emit(P_LE_LE);}
rexpr ::= term LT term LE term.                   {emit(P_LT_LE);}
rexpr ::= term LE term LT term.                   {emit(P_LE_LT);}

// --- operazioni + - * / %
term ::= mterm.
term ::= term PLUS mterm.                         {emit(P_PLUS);}
term ::= term MINUS mterm.                        {emit(P_MINUS);}

mterm ::= fact.
mterm ::= mterm MULT fact.                        {emit(P_MULT);}
mterm ::= mterm DIV fact.                         {emit(P_DIV);}
mterm ::= mterm MOD fact.                         {emit(P_MOD);}
mterm ::= mterm IDIV fact.                        {emit(P_IDIV);}

// --- elementi base delle espressioni ---

fact ::= NOT fact.                                {emit(P_NOT);} 
fact ::= MINUS fact.                              {emit(P_UMINUS);} 
fact ::= PLUS fact.                               // {printf("UPLUS\n");} non serve!
fact ::= iif_fact.
fact ::= INT_CONST(value).                        {emit_s(P_INT_CONST,value);dispose(&value);}
fact ::= STR_CONST(value).                        {emit_s(P_STR_CONST,value);dispose(&value);}
fact ::= FLOAT_CONST(value).                      {emit_s(P_FLOAT_CONST,value);dispose(&value);}
fact ::= TRUE.                                    {emit(P_TRUE);} 
fact ::= FALSE.                                   {emit(P_FALSE);}
fact ::= NIL.                                     {emit(P_NIL);}
fact ::= LPAR expr RPAR.
fact ::= ref.
fact ::= array_const.
fact ::= dict_const.
fact ::= tuple_const.
fact ::= array_compr.
fact ::= dict_compr.
fact ::= IS LPAR expr COMMA type RPAR.            {emit(P_IS);}
fact ::= LPAR expr IS type RPAR.                  {emit(P_IS);}

// --- codice per la iif ---

iif_fact ::= iif_then(N) expr RPAR.               {emit_i(P_LABEL,N);}
iif_test(N) ::= IIF LPAR expr COMMA.              {N=sState->labelCnt++;emit_i(P_IF_FALSE,N);}
iif_then(N) ::= iif_test(P) expr COMMA.           {N=sState->labelCnt++;emit_i(P_GOTO,N);emit_i(P_LABEL,P);}

// --- riferimenti a variabili e chiamata di funzione ---

ref ::= ID(value).                                {emit_s(P_LOAD,value);dispose(&value);}
ref ::= RESULT.                                   {emit(P_LOAD_RESULT);} 
ref ::= OLD.                                      {emit(P_OLD);} 
ref ::= INHERITED.                                {emit(P_LOAD_INHERITED);} 
ref ::= AT ID(value).                             {emit_s(P_LOADREF,value);dispose(&value);}
ref ::= ref DOT ID(value).                        {emit_s(P_LOADX,value);dispose(&value);}
ref ::= ref LSQ expr RSQ.                         {emit(P_SLICE);}
ref ::= ref LPAR par_list(N) RPAR.                {emit_i(P_CALL,N);}

%type par_expr {int}

par_list(N) ::= .                                 {N=0;}
par_list(N) ::= par_expr(P).                      {N=P;}
par_list(N) ::= par_list(P) COMMA par_expr(Q).    {N=P+Q;}
par_expr(N) ::= par_expr_named lexpr.             {N=1002;}                      
par_expr_named ::= ID(value) ASSIGN.              {emit_s(P_NAMEDPARM,value);dispose(&value);}       
par_expr(N) ::= lexpr.                            {N=1;}

// --- costanti ARRAY, DIZIONARI e TUPLE

array_const ::= LSQ RSQ.                          {emit_i(P_ARRAY,0);}
array_const ::= LSQ array_list(N) RSQ.            {emit_i(P_ARRAY,N);}  
array_list(N) ::= array_list(P) COMMA expr.       {N=P+1;}
array_list(N) ::= expr.                           {N=1;}

array_compr ::= LSQ expr FOR EACH ID(value) IN expr WITH expr RSQ. {emit_s(P_COMMENT,"da fare array comprehension ...");dispose(&value);}
array_compr ::= LSQ expr FOR EACH ID(value) IN expr RSQ.           {emit_s(P_COMMENT,"da fare array comprehension ...");dispose(&value);}

dict_const ::= LBR RBR.                           {emit_i(P_DICT,0);}
dict_const ::= LBR dict_list(N) RBR.              {emit_i(P_DICT,N);}
dict_list(N) ::= dict_list_elem.                  {N=1;}    
dict_list(N) ::= dict_list(P) COMMA dict_list_elem. {N=P+1;}
dict_list_elem ::= STR_CONST(value) COLON expr.   {emit_s(P_STR_CONST,value);dispose(&value);} 

dict_compr ::= LSQ expr COLON expr FOR EACH ID(value) IN expr WITH expr RSQ. {emit_s(P_COMMENT,"da fare dict comprehension ...");dispose(&value);}
dict_compr ::= LSQ expr COLON expr FOR EACH ID(value) IN expr RSQ.           {emit_s(P_COMMENT,"da fare dict comprehension ...");dispose(&value);}

tuple_const ::= VBAR tuple_list(N) VBAR.          {emit_i(P_TUPLE,N);}
tuple_list(N) ::= tuple_list(P) COMMA expr.       {N=P+1;}
tuple_list(N) ::= expr.                           {N=1;}
